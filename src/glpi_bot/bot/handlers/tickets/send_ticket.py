import logging
from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup

from glpi_bot.bot.handlers.tickets.instances import bot_message
from glpi_bot.bot.keyboards import main_kb
from glpi_bot.bot.states import BaseStates, FinalStates
from glpi_bot.services import GLPITicketManager
from glpi_bot.services.glpi_service import TicketData


logger = logging.getLogger(__name__)


def setup_send_ticket(glpi: GLPITicketManager):
    router = Router()

    @router.callback_query(F.data == "confirm", StateFilter(FinalStates.confirm))
    async def process_confirm(callback: CallbackQuery, state: FSMContext):
        logger.debug("Call process_confirm")

        try:
            d = await state.get_data()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            return

        ticket_data = TicketData(
                login = d['login'],
                # name = f"[{d['login']}] {d['title']}",
                name = d['title'],
                content = d['description'],
                type = d['type'],
                itilcategories_id = d['itilcategories_id']
        )
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ GLPI
            response = glpi.send_ticket(ticket_data)
            logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤–µ—Ä–Ω—É–ª–æ: {response}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏", reply_markup=main_kb())

        else:
            await bot_message.delete_message(callback.message, state)

            # await bot_message.update_message(
            #         callback.message, state,
            #         f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            #         f"–°—Å—ã–ª–∫–∞: https://sd.it4prof.ru/front/ticket.form.php?id={response['id']}\n"
            #         f"<b>–ù–æ–º–µ—Ä:</b> #{response['id']}\n"
            #         f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {d['title']}\n"
            #         f"<b>–°—Ç–∞—Ç—É—Å:</b> –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            #         keyboard=InlineKeyboardMarkup(inline_keyboard=[])
            #     )

        await state.clear()
        await state.set_state(BaseStates.complete_autorisation)
        await callback.answer()

        await callback.message.answer(
                text=(
                f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"–°—Å—ã–ª–∫–∞: https://sd.it4prof.ru/front/ticket.form.php?id={response['id']}\n"
                f"<b>–ù–æ–º–µ—Ä:</b> #{response['id']}\n"
                f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {d['title']}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"),
                reply_markup=main_kb()
            )



        # await callback.message.answer(
        #         "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ üëá",
        #         reply_markup=main_kb()
        # )

    return router
