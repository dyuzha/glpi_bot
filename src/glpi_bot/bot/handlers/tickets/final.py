# bot/handlers/final.py

import logging
from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, Message

from glpi_bot.bot.handlers.tickets.base import back_handler
from glpi_bot.bot.handlers.tickets.models.dinamic_bod_message import DynamicBotMessage
from glpi_bot.bot.handlers.tickets.models.text_input_step import TextInputStep
from glpi_bot.bot.handlers.tickets.steps.title_step import title_step
from glpi_bot.bot.handlers.utils import add_step
from glpi_bot.bot.states import FinalStates, BaseStates
from glpi_bot.bot.keyboards import base_buttons, confirm_kb, main_kb


logger = logging.getLogger(__name__)
router = Router()
bot_message = DynamicBotMessage()


@router.message(StateFilter(FinalStates.title))
async def process_title(message: Message , state: FSMContext):
    logger.debug(f"Call process_title")
    await title_step(message, state)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    prompt = await bot_message.render(state, "üí¨ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[base_buttons])
    await state.set_state(FinalStates.description)
    await add_step(state, prompt=prompt, keyboard=keyboard)
    await bot_message.update_message(message, state, "üí¨ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ")


 # @router.message(StateFilter(FinalStates.title))
# async def process_title(message: Message , state: FSMContext):
#     logger.debug(f"Call process_title")
#
#     text = message.text.strip()
#     await message.delete()
#
#     # –í–∞–ª–∏–¥–∞—Ü–∏—è
#     if len(text) < 10:
#         await bot_message.update_message(message, state,
#                              f"‚ùó–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n{text} - —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π\n"
#                              "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 10 —Å–∏–º–≤–æ–ª–æ–≤\n"
#                              "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
#         return
#
#     #¬†–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–µ –≤ –æ–±—â–∏–π —à–∞–±–ª–æ–Ω
#     await state.update_data(title=text)
#     await bot_message.add_field(state, "–ó–∞–≥–æ–ª–æ–≤–æ–∫", text)
#
#     # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
#     prompt = await bot_message.render(state, "üí¨ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ")
#     keyboard = InlineKeyboardMarkup(inline_keyboard=[base_buttons])
#     await state.set_state(FinalStates.description)
#     await add_step(state, prompt=prompt, keyboard=keyboard)
#     await bot_message.update_message(message, state, "üí¨ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ")


@router.callback_query(F.data == "navigation_back", StateFilter(FinalStates.description))
async def local_back_in_title(callback: CallbackQuery, state: FSMContext):
    logger.debug("local_back_in_title")
    await bot_message.del_field(state, "–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    await back_handler(callback, state)
    await callback.answer()


@router.message(StateFilter(FinalStates.description))
async def process_description(message: Message , state: FSMContext):
    logger.debug(f"Call process_description")

    text = message.text.strip()
    await message.delete()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(text) < 10:
        await bot_message.update_message(message, state,
                             f"‚ùó–û–ø–∏—Å–∞–Ω–∏–µ:\n{text} - —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π\n"
                             "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 10 —Å–∏–º–≤–æ–ª–æ–≤\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return

    #¬†–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–µ –≤ –æ–±—â–∏–π —à–∞–±–ª–æ–Ω
    await state.update_data(description=text)
    await bot_message.add_field(state, "–û–ø–∏—Å–∞–Ω–∏–µ", text)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    prompt = await bot_message.render(state)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[base_buttons])
    await state.set_state(FinalStates.confirm)
    await add_step(state, prompt=prompt, keyboard=keyboard)
    await bot_message.update_message(message, state, "‚è≥–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏!", keyboard=confirm_kb())


@router.callback_query(F.data == "navigation_back", StateFilter(FinalStates.confirm))
async def local_back_in_description(callback: CallbackQuery, state: FSMContext):
    logger.debug("Call local_back_in_description")
    await bot_message.del_field(state, "–û–ø–∏—Å–∞–Ω–∏–µ")
    await back_handler(callback, state)
    await callback.answer()


@router.callback_query(F.data == "confirm", StateFilter(FinalStates.confirm))
async def process_confirm(callback: CallbackQuery, state: FSMContext):
    logger.debug("Call process_confirm")
    await bot_message.update_message(callback.message, state,
            "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
            keyboard=InlineKeyboardMarkup(inline_keyboard=[])
    )
    await state.clear()
    await state.set_state(BaseStates.complete_autorisation)
    await callback.answer()
    await callback.message.answer(
            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ üëá",
            reply_markup=main_kb()
    )
