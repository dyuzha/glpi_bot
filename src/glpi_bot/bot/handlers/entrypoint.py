import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types.message import Message
from aiogram.types.reply_keyboard_remove import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from glpi_bot.bot.states import BaseStates, AuthStates
from glpi_bot.services import DBService
from glpi_bot.bot.keyboards import main_kb


logger = logging.getLogger(__name__)


START_MESSAGE = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É "
    "–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É <b>–û–û–û \"–ü—Ä–æ—Ñ –ò–¢\"</b>"
)

AUTH_REQUIRED_MESSAGE = (
    "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n"
    "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "
    "(–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>ivanov_ii</code>):"
)


def setup_entrypoint(db: DBService) -> Router:
    router = Router()

    def check_register(user_id: int):
        try:
            login = db.get_login(telegram_id=user_id)
        except Exception as e:
            logger.error(f"Database error for user {user_id}: {str(e)}")
            raise
        return login


    async def main_menu(message: Message, state: FSMContext):
        logger.debug("Call main_menu")
        user_id = message.from_user.id

        login = check_register(user_id)

        if login is None:
            await state.set_state(AuthStates.LOGIN)
            # await state.set_state(BaseStates.waiting_autorisation)
            await message.answer(AUTH_REQUIRED_MESSAGE, parse_mode="HTML",
                                 reply_markup=ReplyKeyboardRemove())
            # await process_login(message, state)
            return

        await state.update_data(login=login)
        await state.set_state(BaseStates.complete_autorisation)
        await message.answer(START_MESSAGE, reply_markup=main_kb())


    @router.message(Command("start"))
    async def cmd_start(message: Message, state: FSMContext):
        logger.debug("Call cmd_start")
        await state.clear()
        await main_menu(message, state)

    return router
