# models/dynamic_message/dinamic_bot_message.py

from typing import Optional
from aiogram.types import Message, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from .message_flasher import MessageFlasher
import logging


logger = logging.getLogger(__name__)


class DynamicBotMessage:
    def __init__(self,
                 inline_keyboard: InlineKeyboardMarkup,
                 head: str = "üìù –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏",
                 separator: str = "\n\n"):
        self._head = head
        self._separator = separator
        self._keyboard = inline_keyboard
        self.flasher = MessageFlasher(self)


    async def add_field(self, state: FSMContext, key: str, value: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        key ‚Äî –∏–º—è –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–û–ø–∏—Å–∞–Ω–∏–µ')
        value ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–£ –Ω–∞—Å —Å–ª–æ–º–∞–ª–∞—Å—å 1–°')
        """
        data = await state.get_data()
        fields = data.get("dynamic_fields", {})
        fields[key] = value
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ {key}: {value}")
        await state.update_data(dynamic_fields=fields)


    async def del_field(self, state: FSMContext, key: str):
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ–ª–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        key ‚Äî –∏–º—è –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–û–ø–∏—Å–∞–Ω–∏–µ')
        """
        data = await state.get_data()
        fields = data.get("dynamic_fields", {})
        if key in fields:
            del fields[key]
            logger.debug(f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª–µ {key}")
            await state.update_data(dynamic_fields=fields)


    async def render(self, state: FSMContext, *strings) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –∏
        –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ edit_message_text.
        """
        data = await state.get_data()
        fields = data.get("dynamic_fields", {})

        parts = [self._head]
        parts.extend(f"{key}: {value}" for key, value in fields.items())
        parts.extend(s for s in strings if s)

        return self._separator.join(parts)


    async def update_message(
            self,
            message: Message,
            state: FSMContext,
            *strings,
            keyboard: Optional[InlineKeyboardMarkup] = None
        ) -> Optional[Message]:

        """
        –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∏–∑–≤–ª–µ–∫–∞—è –µ–≥–æ –∏–∑ state.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Message –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –∏–Ω–∞—á–µ None.
        """
        data = await state.get_data()
        message_id = data.get("bot_message_id")

        if not message_id:
            logger.debug("Not bot_message_id")
            return None

        if not message.bot:
            logger.error("Message has no bot instance")
            return None

        text = await self.render(state, *strings)

        try:
            edited_message = await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=text,
                reply_markup=keyboard or self._keyboard,
            )
        except Exception as e:
            logger.error(f"Failed to edit message: {e}")
            return None

        return edited_message


    async def delete_message(self, message: Message, state: FSMContext) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ."""
        try:
            data = await state.get_data()
            if (message_id := data.get("bot_message_id")) is None:
                logger.debug("bot_message_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state")
                return False

            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=message_id
            )
            # –û—á–∏—â–∞–µ–º message_id –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            await state.update_data(bot_message_id=None)
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False


    async def reset(self, state: FSMContext):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è"""
        await state.update_data(dynamic_fields={})
