import logging
from aiogram import types, F
from aiogram.filters import Command, StateFilter
from glpi_bot.bot.keyboards import main_kb
from glpi_bot.bot import dp
from glpi_bot.services import db_service
from aiogram.fsm.context import FSMContext
from glpi_bot.bot.states import BaseStates, AuthStates
from  glpi_bot.bot.ticket_handler.handler import start_create_ticket, TicketStates

logger = logging.getLogger(__name__)

START_MESSAGE = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ü–†–û–§–ò–¢-–±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GLPI.\n"
    "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É."
)

AUTH_REQUIRED_MESSAGE = (
    "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
    "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "
    "(–Ω-—Ä: <code>ivanov_ii</code>):"
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(START_MESSAGE)
    # –í—Ä—É—á–Ω—É—é –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await cmd_begin(message, state)


@dp.message(AuthStates.SUCCESS)
@dp.message(StateFilter(None))
async def handle_first_message(message: types.Message, state: FSMContext):
    await cmd_begin(message, state)


@dp.message(Command("begin"))
async def cmd_begin(message: types.Message, state: FSMContext):
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /begin")
    try:
        user_id = message.from_user.id
        logger.info(f"User {user_id} started bot")

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏–∑ –ë–î
        try:
            login = db_service.get_login(telegram_id=user_id)
        except Exception as e:
            logger.error(f"Database error for user {user_id}: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. \
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if login is None:
            await message.answer(
                AUTH_REQUIRED_MESSAGE, parse_mode="HTML",
                reply_markup=types.ReplyKeyboardRemove()
            )
            logger.info(f"User {user_id} needs authorization")
            await state.set_state(AuthStates.LOGIN)

        # –ò–Ω–∞—á–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        else:
            logger.info(f"User {user_id} already authorized as {login}")
            await message.answer(
                "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º",
                reply_markup=main_kb()
            )
            # await state.update_data(login=login)
            await state.update_data(step_index = 0)
            await state.set_state(TicketStates.create_ticket)
            await start_create_ticket(message=message, state=state)

    except Exception as e:
        logger.error(f"Unexpected error in start command for user {user_id if 'user_id' in locals() else 'unknown'}: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
