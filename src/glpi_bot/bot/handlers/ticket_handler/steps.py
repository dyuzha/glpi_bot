# steps.py

from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from glpi_bot.bot.states import FormState
from abc import ABC, abstractmethod
from aiogram.fsm.context import FSMContext
from aiogram.types import Message


DISABLE_KEY = "‚ùå –û—Ç–º–µ–Ω–∞"
COMPLETE_KEY = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
BACK_KEY = "üîô –ù–∞–∑–∞–¥"


class FormStep(ABC):
    key = "abs"
    show_key = "abs"

    @property
    @abstractmethod
    def prompt(self) -> str:
        """–ü—Ä–æ–º—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞."""
        pass

    @abstractmethod
    async def handle_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞."""
        pass

    def kb(self):
        return ReplyKeyboardMarkup(
            keyboard=[
            [KeyboardButton(text=DISABLE_KEY), KeyboardButton(text=BACK_KEY)]
            ],
            resize_keyboard=True
        )


class TypeStep(FormStep):
    key = "type"
    show_key = "–¢–∏–ø –∑–∞—è–≤–∫–∏"


    @property
    def prompt(self) -> str:
        return "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (A):"

    async def handle_input(self, message: Message, state: FSMContext):
        await state.update_data({self.key: message.text})


class CategoryStep(FormStep):
    key = "category"
    show_key = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"

    @property
    def prompt(self) -> str:
        return "–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (B):"

    async def handle_input(self, message: Message, state: FSMContext):
        await state.update_data({self.key: message.text})

