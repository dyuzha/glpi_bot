import logging
from aiogram import types
from aiogram.filters import Command
from bot.keyboards import main_kb
from bot import dp
from services import DBInterface
from aiogram.fsm.context import FSMContext
from bot.states import Base

logger = logging.getLogger(__name__)

START_MESSAGE = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ü–†–û–§–ò–¢-–±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GLPI.\n"
    "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É."
)

AUTH_REQUIRED_MESSAGE = (
    "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
    "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "
    "(–Ω-—Ä: <code>ivanov_ii</code>):"
)


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        logger.info(f"User {user_id} started bot")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(START_MESSAGE)

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏–∑ –ë–î —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            login = DBInterface.get_login(telegram_id=user_id)
        except Exception as e:
            logger.error(f"Database error for user {user_id}: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if login is None:
            await message.answer(AUTH_REQUIRED_MESSAGE, parse_mode="HTML")
            logger.info(f"User {user_id} needs authorization")
            await state.set_state(Base.waiting_authorization)


        else:
            logger.info(f"User {user_id} already authorized as {login}")
            await message.answer(START_MESSAGE, reply_markup=main_kb())
            await state.set_state(Base.authorization)

    except Exception as e:
        logger.error(f"Unexpected error in start command for user {user_id if 'user_id' in locals() else 'unknown'}: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
