import logging
from aiogram import F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from glpi.models import TicketBuilder
from bot.keyboards import main_kb, back_kb, confirm_kb, type_kb
from bot import dp
from bot.states import TicketCreation, Base
from config_handlers import GLPI_DATA


logger = logging.getLogger(__name__)

@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", Base.authorization)
async def start_ticket_creation(message: types.Message, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –ò–Ω—Ü–∏–¥–µ–Ω—Ç/–ó–∞–ø—Ä–æ—Å"""
    logger.debug(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    data = await state.get_data()
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ: {data}")

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:\n\n"
        "üêõ <b>–ò–Ω—Ü–∏–¥–µ–Ω—Ç</b> ‚Äî –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å\n"
        "üìã <b>–ó–∞–ø—Ä–æ—Å</b> ‚Äî –µ—Å–ª–∏ –≤–∞–º —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ",
        reply_markup=type_kb()
    )
    await state.set_state(TicketCreation.waiting_for_type)


@dp.message(TicketCreation.waiting_for_type)
async def start_ticket_build(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    logger.debug("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏")

    # –°–¥–µ–ª–∞—Ç—å match/case
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb())
        await state.clear()
        return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_creation(message, state)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
    type_ticket = None
    if message.text == "–ò–Ω—Ü–∏–¥–µ–Ω—Ç":
        logger.debug("–í—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç –ò–Ω—Ü–∏–¥–µ–Ω—Ç")
        type_ticket = 1
    elif message.text == "–ó–∞–ø—Ä–æ—Å":
        logger.debug("–í—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç –ó–∞–ø—Ä–æ—Å")
        type_ticket = 2
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:")
        logger.debug(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: {message.text}")
        return  # –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(type=type_ticket)
    logger.debug(f"–¢–∏–ø –∑–∞—è–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {type_ticket}")
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞—è–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º'):",
        reply_markup=back_kb()
    )
    await state.set_state(TicketCreation.waiting_for_title)


@dp.message(TicketCreation.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è"""
    logger.debug("–ü–µ—Ä–µ—Ö–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–∞")

    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏", reply_markup=type_kb())
        logger.debug("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏)")
        await state.clear()
        return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_creation(message, state)
        return

    if len(message.text) < 5:
        logger.debug(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ {message.text}")
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(title=message.text)
    logger.debug(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞—è–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {message.text}")
    await message.answer(
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:\n\n"
        "‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞?\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ü–ö, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–≤—è–∑–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –æ—à–∏–±–∫–∏ –≤–∏–¥–∏—Ç–µ?\n\n"
        "  –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã –ø–æ–º–æ—á—å –±—ã—Å—Ç—Ä–µ–µ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É:\n\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ü–ö, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–≤—è–∑–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞\n"
        "‚Ä¢ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –º–æ–¥–µ–ª—å",
        reply_markup=back_kb()
    )
    await state.set_state(TicketCreation.waiting_for_description)


@dp.message(TicketCreation.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ GLPI"""
    logger.debug("–ü–µ—Ä–µ—Ö–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏—è")

    if message.text == "üîô –ù–∞–∑–∞–¥":
        data = await state.get_data()
        logger.debug("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è)")
        await message.answer(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫.\n–¢–µ–∫—É—â–∏–π: {data['title']}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:",
            reply_markup=back_kb()
        )
        await state.set_state(TicketCreation.waiting_for_title)
        return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_creation(message, state)
        return

    if len(message.text) < 10:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
        logger.debug(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ {message.text}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à
    await state.update_data(description=message.text)
    logger.debug(f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {message.text}")
    # –ó–∞–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    data = await state.get_data()


    await message.answer(
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{data['description']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=confirm_kb()
    )
    await state.set_state(TicketCreation.confirm_data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.message(TicketCreation.confirm_data)
async def confirm_ticket(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    logger.debug("–ü–µ—Ä–µ—Ö–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    if message.text == "üîô –ù–∞–∑–∞–¥":
        logger.debug("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è)")
        await message.answer(
            "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
            reply_markup=back_kb()
        )
        await state.set_state(TicketCreation.waiting_for_description)
        return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_creation(message, state)
        return

    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {data}")

        ticket_data = {
                "login": data["login"],
                "name": data['title'],
                "content": data['description'],
                "type": data['type'], # 1 –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞, 2 –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                # "urgency": 3, # –°—Ä–æ—á–Ω–æ—Å—Ç—å (1-5)
                # "impact": 3, # –í–ª–∏—è–Ω–∏–µ (1-5)
                # "priority": 3, # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-5)
                # "requesttypes_id": 1, # –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
                # "itilcategories_id": 1, ID –ö–∞—Ç–µ–≥–æ—Ä–∏–∏,
                # "_users_id_requester": 291, # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∑–∞—è–≤–∏—Ç–µ–ª—è
                # "entities_id": 10  # ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (0 –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–π)
            }

        logger.debug(f"–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {ticket_data}")

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ GLPI
            with TicketBuilder(**GLPI_DATA) as glpi:
                result = glpi.create_ticket(**ticket_data)
                logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤–µ—Ä–Ω—É–ª–æ: {result}")
                await message.answer(
                    f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"<b>–ù–æ–º–µ—Ä:</b> #{result['id']}\n"
                    f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data['title']}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                    reply_markup=main_kb()
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_kb()
            )
        finally:
            await state.clear()
            logger.debug(f"–û–±–Ω—É–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    else:
        logger.debug(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ f{message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ")


# @dp.message(Command("back"))
# @dp.message(F.text.lower() == "üîô –ù–∞–∑–∞–¥")
# async def go_back(message: types.Message, state: FSMContext):
#     """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥"""
#     pass

@dp.message(Command("cancel"))
@dp.message(F.text.lower() == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_creation(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await state.clear()
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await message.answer(
        "üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=main_kb()
    )


# @dp.message(F.photo)
# async def handle_photo(message: types.Message, state: FSMContext):
#     photo_id = message.photo[-1].file_id
#     await state.update_data(photo_id=photo_id)
